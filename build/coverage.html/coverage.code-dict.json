{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_promise */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/lib.npmtest_eslint_plugin_promise.js":"/* istanbul instrument in package npmtest_eslint_plugin_promise */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_promise = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_promise = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-promise && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_promise */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_promise\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_promise.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_promise.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_promise.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_promise.__dirname + '/lib.npmtest_eslint_plugin_promise.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/index.js":"module.exports = {\n  rules: {\n    'param-names': require('./rules/param-names'),\n    'no-return-wrap': require('./rules/no-return-wrap'),\n    'always-return': require('./rules/always-return'),\n    'catch-or-return': require('./rules/catch-or-return'),\n    'prefer-await-to-callbacks': require('./rules/prefer-await-to-callbacks'),\n    'prefer-await-to-then': require('./rules/prefer-await-to-then'),\n    'no-native': require('./rules/no-native'),\n    'no-callback-in-promise': require('./rules/no-callback-in-promise'),\n    'no-promise-in-callback': require('./rules/no-promise-in-callback'),\n    'no-nesting': require('./rules/no-nesting'),\n    'avoid-new': require('./rules/avoid-new')\n  },\n  rulesConfig: {\n    'param-names': 1,\n    'always-return': 1,\n    'no-return-wrap': 1,\n    'no-native': 0,\n    'catch-or-return': 1\n  },\n  configs: {\n    recommended: {\n      rules: {\n        'promise/always-return': 'error',\n        'promise/no-return-wrap': 'error',\n        'promise/param-names': 'error',\n        'promise/catch-or-return': 'error',\n        'promise/no-native': 'off',\n        'promise/no-nesting': 'warn',\n        'promise/no-promise-in-callback': 'warn',\n        'promise/no-callback-in-promise': 'warn',\n        'promise/avoid-new': 'warn'\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/param-names.js":"module.exports = {\n  create: function (context) {\n    return {\n      NewExpression: function (node) {\n        if (node.callee.name === 'Promise' && node.arguments.length === 1) {\n          var params = node.arguments[0].params\n\n          if (!params || !params.length) { return }\n\n          if (params[0].name !== 'resolve') {\n            return context.report(node, 'Promise constructor parameters must be named resolve, reject')\n          }\n\n          if (params[1] && params[1].name !== 'reject') {\n            return context.report(node, 'Promise constructor parameters must be named resolve, reject')\n          }\n        }\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/no-return-wrap.js":"/**\n * Rule: no-return-wrap function\n * Prevents uneccessary wrapping of results in Promise.resolve\n * or Promise.reject as the Promise will do that for us\n */\n\n'use strict'\n\nvar isPromise = require('./lib/is-promise')\nvar rejectMessage = 'Expected throw instead of Promise.reject'\nvar resolveMessage = 'Avoid wrapping return values in Promise.resolve'\n\nfunction isInPromise (context) {\n  var expression = context.getAncestors().filter(function (node) {\n    return node.type === 'ExpressionStatement'\n  })[0]\n  return expression && expression.expression && isPromise(expression.expression)\n}\n\nmodule.exports = {\n  create: function (context) {\n    return {\n      ReturnStatement: function (node) {\n        if (isInPromise(context)) {\n          if (node.argument) {\n            if (node.argument.type === 'CallExpression') {\n              if (node.argument.callee.type === 'MemberExpression') {\n                if (node.argument.callee.object.name === 'Promise') {\n                  if (node.argument.callee.property.name === 'resolve') {\n                    context.report(node, resolveMessage)\n                  } else if (node.argument.callee.property.name === 'reject') {\n                    context.report(node, rejectMessage)\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/is-promise.js":"/**\n * Library: isPromise\n * Makes sure that an Expression node is part of a promise.\n */\nvar STATIC_METHODS = [\n  'all',\n  'race',\n  'reject',\n  'resolve'\n]\n\nfunction isPromise (expression) {\n  return ( // hello.then()\n  expression.type === 'CallExpression' &&\n  expression.callee.type === 'MemberExpression' &&\n  expression.callee.property.name === 'then'\n  ) || ( // hello.catch()\n  expression.type === 'CallExpression' &&\n  expression.callee.type === 'MemberExpression' &&\n  expression.callee.property.name === 'catch'\n  ) || ( // somePromise.ANYTHING()\n  expression.type === 'CallExpression' &&\n  expression.callee.type === 'MemberExpression' &&\n  isPromise(expression.callee.object)\n  ) || ( // Promise.STATIC_METHOD()\n  expression.type === 'CallExpression' &&\n  expression.callee.type === 'MemberExpression' &&\n  expression.callee.object.type === 'Identifier' &&\n  expression.callee.object.name === 'Promise' &&\n  STATIC_METHODS.indexOf(expression.callee.property.name) !== -1\n  )\n}\n\nmodule.exports = isPromise\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/always-return.js":"function isFunctionWithBlockStatement (node) {\n  if (node.type === 'FunctionExpression') {\n    return true\n  }\n  if (node.type === 'ArrowFunctionExpression') {\n    return node.body.type === 'BlockStatement'\n  }\n  return false\n}\n\nfunction isThenCallExpression (node) {\n  return (\n  node.type === 'CallExpression' &&\n  node.callee.type === 'MemberExpression' &&\n  node.callee.property.name === 'then'\n  )\n}\n\nfunction isFirstArgument (node) {\n  return (\n  node.parent &&\n  node.parent.arguments &&\n  node.parent.arguments[0] === node\n  )\n}\n\nfunction isInlineThenFunctionExpression (node) {\n  return (\n  isFunctionWithBlockStatement(node) &&\n  isThenCallExpression(node.parent) &&\n  isFirstArgument(node)\n  )\n}\n\nfunction hasParentReturnStatement (node) {\n  if (node && node.parent && node.parent.type) {\n    // if the parent is a then, and we haven't returned anything, fail\n    if (isThenCallExpression(node.parent)) {\n      return false\n    }\n\n    if (node.parent.type === 'ReturnStatement') {\n      return true\n    }\n    return hasParentReturnStatement(node.parent)\n  }\n\n  return false\n}\n\nfunction peek (arr) {\n  return arr[arr.length - 1]\n}\n\nmodule.exports = {\n  create: function (context) {\n    // funcInfoStack is a stack representing the stack of currently executing\n    //   functions\n    // funcInfoStack[i].branchIDStack is a stack representing the currently\n    //   executing branches (\"codePathSegment\"s) within the given function\n    // funcInfoStack[i].branchInfoMap is an object representing information\n    //   about all branches within the given function\n    // funcInfoStack[i].branchInfoMap[j].good is a boolean representing whether\n    //   the given branch explictly `return`s or `throw`s. It starts as `false`\n    //   for every branch and is updated to `true` if a `return` or `throw`\n    //   statement is found\n    // funcInfoStack[i].branchInfoMap[j].loc is a eslint SourceLocation object\n    //   for the given branch\n    // example:\n    //   funcInfoStack = [ { branchIDStack: [ 's1_1' ],\n    //       branchInfoMap:\n    //        { s1_1:\n    //           { good: false,\n    //             loc: <loc> } } },\n    //     { branchIDStack: ['s2_1', 's2_4'],\n    //       branchInfoMap:\n    //        { s2_1:\n    //           { good: false,\n    //             loc: <loc> },\n    //          s2_2:\n    //           { good: true,\n    //             loc: <loc> },\n    //          s2_4:\n    //           { good: false,\n    //             loc: <loc> } } } ]\n    var funcInfoStack = []\n\n    function markCurrentBranchAsGood () {\n      var funcInfo = peek(funcInfoStack)\n      var currentBranchID = peek(funcInfo.branchIDStack)\n      if (funcInfo.branchInfoMap[currentBranchID]) {\n        funcInfo.branchInfoMap[currentBranchID].good = true\n      }\n      // else unreachable code\n    }\n\n    return {\n      ReturnStatement: markCurrentBranchAsGood,\n      ThrowStatement: markCurrentBranchAsGood,\n\n      onCodePathSegmentStart: function (segment, node) {\n        var funcInfo = peek(funcInfoStack)\n        funcInfo.branchIDStack.push(segment.id)\n        funcInfo.branchInfoMap[segment.id] = {good: false, node: node}\n      },\n\n      onCodePathSegmentEnd: function (segment, node) {\n        var funcInfo = peek(funcInfoStack)\n        funcInfo.branchIDStack.pop()\n      },\n\n      onCodePathStart: function (path, node) {\n        funcInfoStack.push({\n          branchIDStack: [],\n          branchInfoMap: {}\n        })\n      },\n\n      onCodePathEnd: function (path, node) {\n        var funcInfo = funcInfoStack.pop()\n\n        if (!isInlineThenFunctionExpression(node)) {\n          return\n        }\n\n        path.finalSegments.forEach((segment) => {\n          var id = segment.id\n          var branch = funcInfo.branchInfoMap[id]\n          if (!branch.good) {\n            if (hasParentReturnStatement(branch.node)) {\n              return\n            }\n\n            // check shortcircuit syntax like `x && x()` and `y || x()``\n            var prevSegments = segment.prevSegments\n            for (var ii = prevSegments.length - 1; ii >= 0; --ii) {\n              var prevSegment = prevSegments[ii]\n              if (funcInfo.branchInfoMap[prevSegment.id].good) return\n            }\n\n            context.report({\n              message: 'Each then() should return a value or throw',\n              node: branch.node\n            })\n          }\n        })\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/catch-or-return.js":"/**\n * Rule: catch-or-return\n * Ensures that promises either include a catch() handler\n * or are returned (to be handled upstream)\n */\n\nvar isPromise = require('./lib/is-promise')\n\nmodule.exports = {\n  create: function (context) {\n    var options = context.options[0] || {}\n    var allowThen = options.allowThen\n    var terminationMethod = options.terminationMethod || 'catch'\n\n    if (typeof terminationMethod === 'string') {\n      terminationMethod = [terminationMethod]\n    }\n\n    return {\n      ExpressionStatement: function (node) {\n        if (!isPromise(node.expression)) {\n          return\n        }\n\n        // somePromise.then(a, b)\n        if (allowThen &&\n          node.expression.type === 'CallExpression' &&\n          node.expression.callee.type === 'MemberExpression' &&\n          node.expression.callee.property.name === 'then' &&\n          node.expression.arguments.length === 2\n        ) {\n          return\n        }\n\n        // somePromise.catch()\n        if (node.expression.type === 'CallExpression' &&\n          node.expression.callee.type === 'MemberExpression' &&\n          terminationMethod.indexOf(node.expression.callee.property.name) !== -1\n        ) {\n          return\n        }\n        context.report(node, 'Expected ' + terminationMethod + '() or return')\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/prefer-await-to-callbacks.js":"/**\n * Rule: prefer-await-to-callbacks\n * Discourage using then() and instead use async/await.\n */\n\nvar errorMessage = 'Avoid callbacks. Prefer Async/Await.'\n\nmodule.exports = function (context) {\n  function checkLastParamsForCallback (node) {\n    var len = node.params.length - 1\n    var lastParam = node.params[len]\n    if (lastParam && (lastParam.name === 'callback' || lastParam.name === 'cb')) {\n      context.report(lastParam, errorMessage)\n    }\n  }\n  function isInsideYieldOrAwait () {\n    return context.getAncestors().some(function (parent) {\n      return parent.type === 'AwaitExpression' || parent.type === 'YieldExpression'\n    })\n  }\n  return {\n    CallExpression: function (node) {\n      // callbacks aren't allowed\n      if (node.callee.name === 'cb' || node.callee.name === 'callback') {\n        context.report(node, errorMessage)\n        return\n      }\n\n      // thennables aren't allowed either\n      var args = node.arguments\n      var num = args.length - 1\n      var arg = num > -1 && node.arguments && node.arguments[num]\n      if (arg && arg.type === 'FunctionExpression' || arg.type === 'ArrowFunctionExpression') {\n        if (arg.params && arg.params[0] && arg.params[0].name === 'err') {\n          if (!isInsideYieldOrAwait()) {\n            context.report(arg, errorMessage)\n          }\n        }\n      }\n    },\n    FunctionDeclaration: checkLastParamsForCallback,\n    FunctionExpression: checkLastParamsForCallback,\n    ArrowFunctionExpression: checkLastParamsForCallback\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/prefer-await-to-then.js":"/**\n * Rule: prefer-await-to-then\n * Discourage using then() and instead use async/await.\n */\n\nmodule.exports = function (context) {\n  return {\n    MemberExpression: function (node) {\n      // you can then() if you are inside of a yield or await\n      if (context.getAncestors().some(function (parent) {\n        return parent.type === 'AwaitExpression' || parent.type === 'YieldExpression'\n      })) {\n        return\n      }\n\n      // if you're a then expression then you're probably a promise\n      if (node.property && node.property.name === 'then') {\n        context.report(node.property, 'Prefer await to then().')\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/no-native.js":"// Borrowed from here:\n// https://github.com/colonyamerican/eslint-plugin-cah/issues/3\n\n'use strict'\n\nfunction isDeclared (scope, ref) {\n  return scope.variables.some(function (variable) {\n    if (variable.name !== ref.identifier.name) {\n      return false\n    }\n\n    if (!variable.defs || !variable.defs.length) {\n      return false\n    }\n\n    return true\n  })\n}\n\nmodule.exports = {\n  create: function (context) {\n    var MESSAGE = '\"{{name}}\" is not defined.'\n\n    /**\n     * Checks for and reports reassigned constants\n     *\n     * @param {Scope} scope - an escope Scope object\n     * @returns {void}\n     * @private\n     */\n    return {\n      'Program:exit': function () {\n        var scope = context.getScope()\n\n        scope.implicit.left.forEach(function (ref) {\n          if (ref.identifier.name !== 'Promise') {\n            return\n          }\n\n          if (!isDeclared(scope, ref)) {\n            context.report(ref.identifier, MESSAGE, { name: ref.identifier.name })\n          }\n        })\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/no-callback-in-promise.js":"/**\n * Rule: no-callback-in-promise\n * Avoid calling back inside of a promise\n */\n\nvar hasPromiseCallback = require('./lib/has-promise-callback')\nvar isInsidePromise = require('./lib/is-inside-promise')\nvar isCallback = require('./lib/is-callback')\n\nmodule.exports = function (context) {\n  return {\n    CallExpression: function (node) {\n      if (!isCallback(node)) {\n        // in general we send you packing if you're not a callback\n        // but we also need to watch out for whatever.then(cb)\n        if (hasPromiseCallback(node)) {\n          var name = node.arguments && node.arguments[0] && node.arguments[0].name\n          if (name === 'callback' || name === 'cb' || name === 'next' || name === 'done') {\n            context.report(node.arguments[0], 'Avoid calling back inside of a promise.')\n          }\n        }\n        return\n      }\n      if (context.getAncestors().some(isInsidePromise)) {\n        context.report(node, 'Avoid calling back inside of a promise.')\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/has-promise-callback.js":"/**\n * Library: Has Promis eCallback\n * Makes sure that an Expression node is part of a promise\n * with callback functions (like then() or catch())\n */\n\nfunction hasPromiseCallback (node) {\n  if (node.type !== 'CallExpression') return\n  if (node.callee.type !== 'MemberExpression') return\n  var propertyName = node.callee.property.name\n  return propertyName === 'then' || propertyName === 'catch'\n}\n\nmodule.exports = hasPromiseCallback\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/is-inside-promise.js":"function isInsidePromise (node) {\n  var isFunctionExpression = node.type === 'FunctionExpression' ||\n      node.type === 'ArrowFunctionExpression'\n  var parent = node.parent || {}\n  var callee = parent.callee || {}\n  var name = callee.property && callee.property.name || ''\n  var parentIsPromise = name === 'then' || name === 'catch'\n  var isInCB = isFunctionExpression && parentIsPromise\n  return isInCB\n}\n\nmodule.exports = isInsidePromise\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/is-callback.js":"var isNamedCallback = require('./is-named-callback')\n\nfunction isCallingBack (node) {\n  var isCallExpression = node.type === 'CallExpression'\n  var callee = node.callee || {}\n  var nameIsCallback = isNamedCallback(callee.name)\n  var isCB = isCallExpression && nameIsCallback\n  return isCB\n}\n\nmodule.exports = isCallingBack\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/is-named-callback.js":"var callbacks = ['done', 'cb', 'callback', 'next']\n\nmodule.exports = function isNamedCallback (potentialCallbackName) {\n  return callbacks.some(function (trueCallbackName) {\n    return potentialCallbackName === trueCallbackName\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/no-promise-in-callback.js":"/**\n * Rule: no-promise-in-callback\n * Discourage using promises inside of callbacks.\n */\n\nvar isPromise = require('./lib/is-promise')\nvar isInsideCallback = require('./lib/is-inside-callback')\n\nmodule.exports = function (context) {\n  return {\n    CallExpression: function (node) {\n      if (!isPromise(node)) return\n\n      // if i'm returning the promise, it's probably not really a callback\n      // function, and I should be okay....\n      if (node.parent.type === 'ReturnStatement') return\n\n      // what about if the parent is an ArrowFunctionExpression\n      // would that imply an implicit return?\n\n      if (context.getAncestors().some(isInsideCallback)) {\n        context.report(node.callee, 'Avoid using promises inside of callbacks.')\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/lib/is-inside-callback.js":"var isInsidePromise = require('./is-inside-promise')\n\nfunction isInsideCallback (node) {\n  var isCallExpression = node.type === 'FunctionExpression' ||\n    node.type === 'ArrowFunctionExpression' ||\n    node.type === 'FunctionDeclaration' // this may be controversial\n\n  // it's totally fine to use promises inside promises\n  if (isInsidePromise(node)) return\n\n  var name = node.params && node.params[0] && node.params[0].name\n  var firstArgIsError = name === 'err' || name === 'error'\n  var isInACallback = isCallExpression && firstArgIsError\n  return isInACallback\n}\n\nmodule.exports = isInsideCallback\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/no-nesting.js":"/**\n * Rule: no-nesting\n * Avoid nesting your promises.\n */\n\nvar hasPromiseCallback = require('./lib/has-promise-callback')\nvar isInsidePromise = require('./lib/is-inside-promise')\n\nmodule.exports = function (context) {\n  return {\n    CallExpression: function (node) {\n      if (!hasPromiseCallback(node)) return\n      if (context.getAncestors().some(isInsidePromise)) {\n        context.report(node, 'Avoid nesting promises.')\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-promise/node_modules/eslint-plugin-promise/rules/avoid-new.js":"/**\n * Rule: avoid-new\n * Avoid creating new promises outside of utility libraries.\n */\n\nmodule.exports = function (context) {\n  return {\n    NewExpression: function (node) {\n      if (node.callee.name === 'Promise') {\n        context.report(node, 'Avoid creating new promises.')\n      }\n    }\n  }\n}\n"}